Useful files:

# sortColors.py contains an implementation of Insertion Sort.

# generatePermutations.py contains a recursive implementation of generating all permutations of a string.
permute.py does the same thing.

# Trie.py contains an implementation of the prefix tree. It should be useful.

# Rabin_Karp.py contains the implementation of Rabin Karp string search algorithm. It is good at searching a specific pattern in the string.

# Another string search algorithm with a runtime of O(m+n) is KMP algorithm.
https://zhuanlan.zhihu.com/p/41047378

# StringProcess.py contains a code block to count the number of chars in the string.

# BinarySearch.py contains a basic implementation of binary search.

# searchMatrix.py contains a basic way to search through a matrix.

# MatrixProcess.py contains some lines to create, copy, and transpose a matrix.
------------------------------------------------------------------

Useful tips:

# every time see "kth ...", think about heap. A single heapify only takes O(logn), and a heap built by running heapify on the first (len(A)//2) elements of the list A only takes O(n) time.

# Recursion implicitly uses a stack, so if the recursion level is too deep, it can overflow. In python, the limit is 1000.

# Recursion can never be O(1) space complexity.
